# get the hostname from ~/.ssh/config
ssh_alias () {
    ssh -G $1 | grep hostname | head -n 1 | cut -d ' ' -f2
}

##################################################
# Extract - extract most common compression	 #
# types	    	    	 			 #
##################################################

function extract()
{
     if [ -f $1 ] ; then
         case $1 in
            *.tar.bz2)   
                tar xvjf $1     
                ;;
            *.tar.gz)    
                tar xvzf $1     
                ;;
            *.bz2)       
                bunzip2 $1      
                ;;
            *.rar)
                unrar x $1      
                ;;
            *.gz)
                gunzip $1       
                ;;
            *.tar)
                tar xvf $1      
                ;;
            *.tbz2)
                tar xvjf $1     
                ;;
            *.tgz)
                tar xvzf $1     
                ;;
            *.zip)
                unzip $1        
                ;;
            *.Z)
                uncompress $1   
                ;;
            *.7z)
                7z x $1         
                ;;
            *)  
                echo "'$1' cannot be extracted via extract" 
                ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}


###### generate a random password
#   $1 = number of characters; defaults to 32
#   $2 = include special characters; 1 = yes, 0 = no; defaults to 1
# copyright 2007 - 2010 Christopher Bratusek
function randompw() {
	 if [[ $2 == "!" ]]; then
	    echo $(cat /dev/urandom | tr -cd '[:graph:]' | head -c ${1:-32})
	    else echo $(cat /dev/urandom | tr -cd '[:alnum:]' | head -c ${1:-32})
	    fi
}

##################################################
# Find a file(s) ...				 #
##################################################

###### ... with pattern $1 in name and Execute $2 on it
function fe() { find . -type f -iname '*'$1'*' -exec "${2:-file}" {} \;  ; }

###### ... under the current directory
function ff() { /usr/bin/find . -name "$@" ; }

###### ... whose name ends with a given string
function ffe() { /usr/bin/find . -name '*'"$@" ; }

PATH=$PATH:~/bin/
PATH=$PATH:~/.local/bin/

#eval $(thefuck --alias)
alias ll='ls -alhF'
alias zshconfig="emacs -nw ~/.config/zshrc.local && source ~/.config/zshrc.local"
alias i3config="emacs -nw ~/.config/i3/config"
alias sshconfig="emacs -nw ~/.ssh/config"
alias i3statusconfig="emacs -nw ~/.config/i3/i3status.conf"

function python_style() {
	 echo "module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_CONSTANT_NAME, global_var_name, instance_var_name, function_parameter_name, local_var_name"
}

#bindkey '\e[A' history-beginning-search-backward
#bindkey '\e[B' history-beginning-search-forward

# CTRL-Shift-R - Paste the selected modified/staged git file paths into the command line
__fzf_git_files() {
  setopt localoptions pipefail no_aliases 2> /dev/null
  local item

  # Check if we're in a git repository
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    { git diff --name-only --cached; git diff --name-only; } | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore ${FZF_DEFAULT_OPTS-} ${FZF_CTRL_R_OPTS-}" $(__fzfcmd) -m "$@" | while read item; do
      echo -n "${(q)item} "
    done
    local ret=$?
    echo
    return $ret
  else
    echo "Not inside a git repository"
    return 1
  fi
}


fzf-git-widget() {
  local selected_file
  selected_file=$(__fzf_git_files)
  if [[ -n $selected_file ]]; then
    LBUFFER+=$selected_file
  fi
  zle reset-prompt
}

zle -N select_git_dirty_file
bindkey '^x^g' select_git_dirty_file

zle     -N            fzf-git-widget
bindkey "^G" fzf-git-widget

# brazil ws widget
parse_and_cd() {
  local root_dir=$(bws show -f json | jq -r '.root')
  local selection=$(ls -d "${root_dir}/src/"* | fzf -m)
  if [ -n "$selection" ] && [ -d "$selection" ]; then
    echo $selection
    return 0
  else
    echo "Invalid selection: $selection"
    return 1
  fi
}

#fzf-dir-widget() {
#  LBUFFER="${LBUFFER}$(parse_and_cd)"
#  zle reset-prompt
#}
#zle -N fzf-dir-widget
#bindkey '^[' fzf-dir-widget


bcd() {
      local selection=$(ls -d $(bws show -f json | jq -r '.root')/src/* | fzf -m)
      if [ -n "$selection" ] && [ -d "$selection" ]; then
      	 cd "$selection"
      fi
}


#bindkey '^[[28;5R' fzf-git-widget
#bindkey -M emacs '^[[28;5R' fzf-git-widget
#bindkey -M vicmd '^[[28;5R' fzf-git-widget
#bindkey -M viins '^[[28;5R' fzf-git-widget

# Function to run the script with fzf
git_fuzzy_select() {
  local files
  files=$(git diff --name-only --cached)  # Get staged files
  files+="$(git diff --name-only)"        # Append modified files
  selected_file=$(echo "$files" | fzf --multi --select-1 --print-query)
  echo "$selected_file"
}

# Create a custom widget to invoke the function
#zle -N git_fuzzy_select_widget git_fuzzy_select

# Bind the key combination to the custom widget
#bindkey "^R" git_fuzzy_select_widget


alias em='emacs -nw'

alias st='git status'
alias gco='git branch -a | fzf --height=20 --reverse --border | xargs git checkout'
alias gres="git restore --staged --worktree \"*\" "
alias kgrind="kcachegrind"
alias volume='pavucontrol'

alias python='python3'
alias pip='pip3'

alias opn='xdg-open'

alias ccat='pygmentize -g -O style=colorful,linenos=1'

alias grab='peek'
alias snipping-tool='peek'

# Open a new window in this term's cwd
alias nw="gnome-terminal"
nwZle() { zle push-line; BUFFER="nw"; zle accept-line; }
zle -N nwZle
# CTRL+n
bindkey '^n' nwZle

export PYTHONSTARTUP=$HOME/.pythonrcalias lucky='ducky' # put in the web-search plugin

alias gst-launch=gst-launch-1.0
alias gac="git add -u; git commit -m"
alias rdp="Remmina"
alias settings="env XDG_CURRENT_DESKTOP=GNOME gnome-control-center"

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='emacs -nw'
else
  export EDITOR='emacs'
fi

function swap()
{
    SUM=0
    OVERALL=0
    for DIR in `find /proc/ -maxdepth 1 -type d | egrep "^/proc/[0-9]"` ; do
	PID=`echo $DIR | cut -d / -f 3`
	PROGNAME=`ps -p $PID -o comm --no-headers`
	for SWAP in `grep Swap $DIR/smaps 2>/dev/null| awk '{ print $2 }'`
	do
	    let SUM=$SUM+$SWAP
	done
	echo "PID=$PID - Swap used: $SUM - ($PROGNAME )"
	let OVERALL=$OVERALL+$SUM
	SUM=0
    done
    echo "Overall swap used: $OVERALL"
}

alias xevkb="xev -event keyboard | egrep -o '(keycode(.)+\)|XLookup.+[1-9].+)'"

export PATH="$PATH:/home/ANT.AMAZON.COM/hammerpa/.local/bin"
export PATH=$PATH:$HOME/.toolbox/bin

export FZF_ALT_C_COMMAND="fd -t d . $HOME/code"

if [[ -z "$MS_WSL" ]]; then
    source $HOME/.config/shell_clipboard_sync.zsh
    source $HOME/.config/bashrc_extensions.bash 
    source  /usr/share/autojump/autojump.zsh
else
    source $HOME/.config/zshrc.windows
    source $HOME/.config/fzf.windows
fi




